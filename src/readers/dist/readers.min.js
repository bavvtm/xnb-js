/** 
 * xnb.js 1.3.5
 * made by Lybell( https://github.com/lybell-art/ )
 * This library is based on the XnbCli made by Leonblade.
 * 
 * xnb.js is licensed under the LGPL 3.0 License.
 * 
 * Libsquish license : MIT
 * -----------------------------------------------------------------------------
 *		Copyright (c) 2006 Simon Brown               si@sjbrown.co.uk
 *		Permission is hereby granted, free of charge, to any person obtaining
 *		a copy of this software and associated documentation files (the 
 *		"Software"), to	deal in the Software without restriction, including
 *		without limitation the rights to use, copy, modify, merge, publish,
 *		distribute, sublicense, and/or sell copies of the Software, and to 
 *		permit persons to whom the Software is furnished to do so, subject to 
 *		the following conditions:
 *		The above copyright notice and this permission notice shall be included
 *		in all copies or substantial portions of the Software.
 *		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 *		OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 *		MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 *		IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
 *		CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
 *		TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
 *		SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *		
 *	--------------------------------------------------------------------------
*/

!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).XNB={})}(this,function(t){"use strict";class e{static isTypeOf(t){return!1}static hasSubType(){return!1}static parseTypeList(){return[this.type()]}static type(){return this.name.slice(0,-6)}isValueType(){return!0}get type(){return this.constructor.type()}read(t,e){throw new Error("Cannot invoke methods on abstract class.")}write(t,e,r){throw new Error("Cannot invoke methods on abstract class.")}writeIndex(t,e){null!=e&&t.write7BitNumber(Number.parseInt(e.getIndex(this))+1)}toString(){return this.type}parseTypeList(){return this.constructor.parseTypeList()}}class r extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.UInt32Reader":case"System.UInt32":return!0;default:return!1}}read(t){return t.readUInt32()}write(t,e,r){this.writeIndex(t,r),t.writeUInt32(e)}}const s=[55296,56320];function n(t){var e;if("number"==typeof t&&(t=[t]),null===(e=t)||void 0===e||!e.length)throw new Error("Invalid codeset!");return 1===t.length?t[0]:((1023&t[0])<<10)+(1023&t[1])+65536}function i(t){const e=function(t){const e=Array.from({length:t.length},(e,r)=>t.charCodeAt(r)),r=[];let i=0;for(;i<t.length;){let t=e[i];(s[0]&t)!==s[0]?(r.push(t),i++):(r.push(n(e.slice(i,i+2))),i+=2)}return r}(t);return e.reduce((t,e)=>e<128?t+1:e<2048?t+2:e<65536?t+3:t+4,0)}class a extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.StringReader":case"System.String":return!0;default:return!1}}read(t){let e=t.read7BitNumber();return t.readString(e)}write(t,e,r){this.writeIndex(t,r);const s=i(e);t.write7BitNumber(s),t.writeString(e)}isValueType(){return!1}}class o extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.BooleanReader":case"System.Boolean":return!0;default:return!1}}read(t){return Boolean(t.readInt())}write(t,e,r){this.writeIndex(t,r),t.writeByte(e)}}class l extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.CharReader":case"System.Char":return!0;default:return!1}}read(t){let e=this._getCharSize(t.peekInt());return t.readString(e)}write(t,e,r){this.writeIndex(t,r),t.writeString(e)}_getCharSize(t){return 1+(3841982464>>(t>>3&30)&3)}}class u extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.Int32Reader":case"Microsoft.Xna.Framework.Content.EnumReader":case"System.Int32":return!0;default:return!1}}read(t){return t.readInt32()}write(t,e,r){this.writeIndex(t,r),t.writeInt32(e)}}class c extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.ListReader":case"System.Collections.Generic.List":return!0;default:return!1}}static hasSubType(){return!0}constructor(t){super(),this.reader=t}read(t,e){const s=(new r).read(t),n=[];for(let r=0;r<s;r++){const r=this.reader.isValueType()?this.reader.read(t):e.read(t);n.push(r)}return n}write(t,e,s){this.writeIndex(t,s);(new r).write(t,e.length,null);for(let r of e)this.reader.write(t,r,this.reader.isValueType()?null:s)}isValueType(){return!1}get type(){return"List<".concat(this.reader.type,">")}parseTypeList(){const t=this.reader.parseTypeList();return["".concat(this.type,":").concat(t.length),...t]}}class h extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.NullableReader"===t}static hasSubType(){return!0}constructor(t){super(),this.reader=t}read(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;const r=new o;return t.peekByte(1)?null===e||this.reader.isValueType()?(r.read(t),this.reader.read(t)):e.read(t):(r.read(t),null)}write(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;null!==e?((null===r||this.reader.isValueType())&&t.writeByte(1),this.reader.write(t,e,this.reader.isValueType()?null:r)):t.writeByte(0)}isValueType(){return!1}get type(){return"Nullable<".concat(this.reader.type,">")}parseTypeList(){const t=this.reader.parseTypeList();return["".concat(this.type,":").concat(t.length),...t]}}class d extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.RectangleReader":case"Microsoft.Xna.Framework.Rectangle":return!0;default:return!1}}read(t){const e=new u;return{x:e.read(t),y:e.read(t),width:e.read(t),height:e.read(t)}}write(t,e,r){this.writeIndex(t,r);const s=new u;s.write(t,e.x,null),s.write(t,e.y,null),s.write(t,e.width,null),s.write(t,e.height,null)}}class w extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.SingleReader":case"System.Single":return!0;default:return!1}}read(t){return t.readSingle()}write(t,e,r){this.writeIndex(t,r),t.writeSingle(e)}}const p=256;function f(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var s=r.call(t,e||"default");if("object"!=typeof s)return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function y(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);e&&(s=s.filter(function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable})),r.push.apply(r,s)}return r}function m(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?y(Object(r),!0).forEach(function(e){f(t,e,r[e])}):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):y(Object(r)).forEach(function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))})}return t}function g(t,e,r,s){let n=Array(s);for(let t=0;t<s;t++)n[t]=Array(s);for(let t=0;t<s;t++)for(let e=0;e<s;e++)n[t][e]=1*(t===e);let i=function(t){return[[Math.cos(t),Math.sin(t)],[-Math.sin(t),Math.cos(t)]]}(r);return n[t][t]=i[0][0],n[e][e]=i[1][1],n[t][e]=i[0][1],n[e][t]=i[1][0],n}function x(t,e,r){let s=0,n=e-t;return s=Math.abs(n)<=1e-12?Math.PI/4:.5*Math.atan(2*r/(e-t)),s}function v(t){let e=t.length,r=0,s=[0,1];for(let n=0;n<e;n++)for(let i=n+1;i<e;i++)Math.abs(r)<=Math.abs(t[n][i])&&(r=Math.abs(t[n][i]),s=[n,i]);return[s,r]}function _(t,e){let r=t.length,s=Array(r);for(let t=0;t<r;t++)s[t]=Array(r);for(let n=0;n<r;n++)for(let i=0;i<r;i++){s[n][i]=0;for(let a=0;a<r;a++)for(let o=0;o<r;o++)s[n][i]=s[n][i]+t[a][n]*e[a][o]*t[o][i]}return s}function b(t,e){let r=t.length,s=Array(r);for(let t=0;t<r;t++)s[t]=Array(r);for(let n=0;n<r;n++)for(let i=0;i<r;i++){s[n][i]=0;for(let a=0;a<r;a++)s[n][i]=s[n][i]+t[n][a]*e[a][i]}return s}function M(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1e-7,r=t.length,s=Array(r),n=Math.abs(e/r),i=Array(r);for(let t=0;t<r;t++)i[t]=Array(r);for(let t=0;t<r;t++)for(let e=0;e<r;e++)i[t][e]=1*(t===e);let a=v(t);for(;Math.abs(a[1])>=Math.abs(n);){let e=a[0][0],s=a[0][1],n=g(e,s,x(t[e][e],t[s][s],t[e][s]),r);t=_(n,t),i=b(i,n),a=v(t)}for(let e=0;e<r;e++)s[e]=t[e][e];return function(t,e){let r=t.length;e.length;let s=Array.from({length:r},(r,s)=>{let n=e.map(t=>t[s]);return{value:t[s],vec:n}});s.sort((t,e)=>e.value-t.value);let n=s.map(t=>{let{value:e}=t;return e}),i=s.map(t=>{let{vec:e}=t;return e});return[n,i]}(s,i)}class T{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t;this._values=[t,e,r]}get x(){return this._values[0]}get y(){return this._values[1]}get z(){return this._values[2]}set x(t){this._values[0]=t}set y(t){this._values[1]=t}set z(t){this._values[2]=t}get length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}get lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}get normalized(){return 0===this.length?null:T.multScalar(this,1/this.length)}get colorInt(){return this._values.map(t=>{const e=parseInt(255*t+.5);return Math.max(Math.min(e,255),0)})}clone(){return new T(this.x,this.y,this.z)}set(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t;return this._values[0]=t,this._values[1]=e,this._values[2]=r,this}toVec4(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;return new z(this.x,this.y,this.z,t)}addVector(t){return this._values[0]+=t.x,this._values[1]+=t.y,this._values[2]+=t.z,this}addScaledVector(t,e){return this._values[0]+=t.x*e,this._values[1]+=t.y*e,this._values[2]+=t.z*e,this}mult(t){return this._values[0]*=t,this._values[1]*=t,this._values[2]*=t,this}multVector(t){return this._values[0]*=t.x,this._values[1]*=t.y,this._values[2]*=t.z,this}clamp(t,e){const r=r=>t>r?t:e<r?e:r;return this._values[0]=r(this._values[0]),this._values[1]=r(this._values[1]),this._values[2]=r(this._values[2]),this}clampGrid(){const t=(t,e)=>{return Math.trunc((0>(r=t)?0:1<r?1:r)*e+.5)/e;var r};return this._values[0]=t(this._values[0],31),this._values[1]=t(this._values[1],63),this._values[2]=t(this._values[2],31),this}normalize(){return this._values[0]/=this.length,this._values[1]/=this.length,this._values[2]/=this.length,this}toString(){return"Vec3( ".concat(this._values.join(", ")," )")}static add(t,e){return new T(t.x+e.x,t.y+e.y,t.z+e.z)}static sub(t,e){return new T(t.x-e.x,t.y-e.y,t.z-e.z)}static dot(t,e){return t.x*e.x+t.y*e.y+t.z*e.z}static multScalar(t,e){return new T(t.x*e,t.y*e,t.z*e)}static multVector(t,e){return new T(t.x*e.x,t.y*e.y,t.z*e.z)}static interpolate(t,e,r){let s=T.multScalar(t,1-r),n=T.multScalar(e,r);return T.add(s,n)}}class z{constructor(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t;this._values=[t,e,r,s]}get x(){return this._values[0]}get y(){return this._values[1]}get z(){return this._values[2]}get w(){return this._values[3]}set x(t){this._values[0]=t}set y(t){this._values[1]=t}set z(t){this._values[2]=t}set w(t){this._values[3]=t}get length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}get lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}get normalized(){return 0===this.length?null:z.multScalar(this,1/this.length)}get xyz(){return new T(this.x,this.y,this.z)}get splatX(){return new z(this.x)}get splatY(){return new z(this.y)}get splatZ(){return new z(this.z)}get splatW(){return new z(this.w)}clone(){return new z(this.x,this.y,this.z,this.w)}set(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:t,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t,s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:t;return this._values[0]=t,this._values[1]=e,this._values[2]=r,this._values[3]=s,this}toVec3(){return this.xyz}addVector(t){return this._values[0]+=t.x,this._values[1]+=t.y,this._values[2]+=t.z,this._values[3]+=t.w,this}addScaledVector(t,e){return this._values[0]+=t.x*e,this._values[1]+=t.y*e,this._values[2]+=t.z*e,this._values[3]+=t.w*e,this}subVector(t){return this._values[0]-=t.x,this._values[1]-=t.y,this._values[2]-=t.z,this._values[3]-=t.w,this}mult(t){return this._values[0]*=t,this._values[1]*=t,this._values[2]*=t,this._values[3]*=t,this}multVector(t){return this._values[0]*=t.x,this._values[1]*=t.y,this._values[2]*=t.z,this._values[3]*=t.w,this}reciprocal(){return this._values[0]=1/this._values[0],this._values[1]=1/this._values[1],this._values[2]=1/this._values[2],this._values[3]=1/this._values[3],this}clamp(t,e){const r=r=>t>r?t:e<r?e:r;return this._values[0]=r(this._values[0]),this._values[1]=r(this._values[1]),this._values[2]=r(this._values[2]),this._values[3]=r(this._values[3]),this}clampGrid(){const t=t=>0>t?0:1<t?1:t,e=(e,r)=>Math.trunc(t(e)*r+.5)/r;return this._values[0]=e(this._values[0],31),this._values[1]=e(this._values[1],63),this._values[2]=e(this._values[2],31),this._values[3]=t(this._values[3]),this}truncate(){return this._values[0]=Math.trunc(this._values[0]),this._values[1]=Math.trunc(this._values[1]),this._values[2]=Math.trunc(this._values[2]),this._values[3]=Math.trunc(this._values[3]),this}normalize(){return this._values[0]/=this.length,this._values[1]/=this.length,this._values[2]/=this.length,this._values[3]/=this.length,this}toString(){return"Vec4( ".concat(this._values.join(", ")," )")}static add(t,e){return new z(t.x+e.x,t.y+e.y,t.z+e.z,t.w+e.w)}static sub(t,e){return new z(t.x-e.x,t.y-e.y,t.z-e.z,t.w-e.w)}static dot(t,e){return t.x*e.x+t.y*e.y+t.z*e.z+t.w*e.w}static multScalar(t,e){return new z(t.x*e,t.y*e,t.z*e,t.w*e)}static multVector(t,e){return new z(t.x*e.x,t.y*e.y,t.z*e.z,t.w*e.w)}static interpolate(t,e,r){let s=z.multScalar(t,1-r),n=z.multScalar(e,r);return z.add(s,n)}static multiplyAdd(t,e,r){return new z(t.x*e.x+r.x,t.y*e.y+r.y,t.z*e.z+r.z,t.w*e.w+r.w)}static negativeMultiplySubtract(t,e,r){return new z(r.x-t.x*e.x,r.y-t.y*e.y,r.z-t.z*e.z,r.w-t.w*e.w)}static compareAnyLessThan(t,e){return t.x<e.x||t.y<e.y||t.z<e.z||t.w<e.w}}function S(t,e){const r=function(t,e){let r=0,s=t.reduce((t,s,n)=>(r+=e[n],t.addScaledVector(s,e[n]),t),new T(0));s.mult(1/r);let n=t.reduce((t,r,n)=>{let i=e[n],a=T.sub(r,s);return t[0][0]+=a.x*a.x*i,t[0][1]+=a.x*a.y*i,t[0][2]+=a.x*a.z*i,t[1][1]+=a.y*a.y*i,t[1][2]+=a.y*a.z*i,t[2][2]+=a.z*a.z*i,t},[[0,0,0],[0,0,0],[0,0,0]]);return n[1][0]=n[0][1],n[2][0]=n[0][2],n[2][1]=n[1][2],n}(t,e);return new T(...function(t){let[,[e]]=M(t);return e}(r))}const V=[[[0,0,0],[0,0,0]],[[0,0,1],[0,0,1]],[[0,0,2],[0,0,2]],[[0,0,3],[0,1,1]],[[0,0,4],[0,1,0]],[[1,0,3],[0,1,1]],[[1,0,2],[0,1,2]],[[1,0,1],[0,2,1]],[[1,0,0],[0,2,0]],[[1,0,1],[0,2,1]],[[1,0,2],[0,2,2]],[[1,0,3],[0,3,1]],[[1,0,4],[0,3,0]],[[2,0,3],[0,3,1]],[[2,0,2],[0,3,2]],[[2,0,1],[0,4,1]],[[2,0,0],[0,4,0]],[[2,0,1],[0,4,1]],[[2,0,2],[0,4,2]],[[2,0,3],[0,5,1]],[[2,0,4],[0,5,0]],[[3,0,3],[0,5,1]],[[3,0,2],[0,5,2]],[[3,0,1],[0,6,1]],[[3,0,0],[0,6,0]],[[3,0,1],[0,6,1]],[[3,0,2],[0,6,2]],[[3,0,3],[0,7,1]],[[3,0,4],[0,7,0]],[[4,0,4],[0,7,1]],[[4,0,3],[0,7,2]],[[4,0,2],[1,7,1]],[[4,0,1],[1,7,0]],[[4,0,0],[0,8,0]],[[4,0,1],[0,8,1]],[[4,0,2],[2,7,1]],[[4,0,3],[2,7,0]],[[4,0,4],[0,9,0]],[[5,0,3],[0,9,1]],[[5,0,2],[3,7,1]],[[5,0,1],[3,7,0]],[[5,0,0],[0,10,0]],[[5,0,1],[0,10,1]],[[5,0,2],[0,10,2]],[[5,0,3],[0,11,1]],[[5,0,4],[0,11,0]],[[6,0,3],[0,11,1]],[[6,0,2],[0,11,2]],[[6,0,1],[0,12,1]],[[6,0,0],[0,12,0]],[[6,0,1],[0,12,1]],[[6,0,2],[0,12,2]],[[6,0,3],[0,13,1]],[[6,0,4],[0,13,0]],[[7,0,3],[0,13,1]],[[7,0,2],[0,13,2]],[[7,0,1],[0,14,1]],[[7,0,0],[0,14,0]],[[7,0,1],[0,14,1]],[[7,0,2],[0,14,2]],[[7,0,3],[0,15,1]],[[7,0,4],[0,15,0]],[[8,0,4],[0,15,1]],[[8,0,3],[0,15,2]],[[8,0,2],[1,15,1]],[[8,0,1],[1,15,0]],[[8,0,0],[0,16,0]],[[8,0,1],[0,16,1]],[[8,0,2],[2,15,1]],[[8,0,3],[2,15,0]],[[8,0,4],[0,17,0]],[[9,0,3],[0,17,1]],[[9,0,2],[3,15,1]],[[9,0,1],[3,15,0]],[[9,0,0],[0,18,0]],[[9,0,1],[0,18,1]],[[9,0,2],[0,18,2]],[[9,0,3],[0,19,1]],[[9,0,4],[0,19,0]],[[10,0,3],[0,19,1]],[[10,0,2],[0,19,2]],[[10,0,1],[0,20,1]],[[10,0,0],[0,20,0]],[[10,0,1],[0,20,1]],[[10,0,2],[0,20,2]],[[10,0,3],[0,21,1]],[[10,0,4],[0,21,0]],[[11,0,3],[0,21,1]],[[11,0,2],[0,21,2]],[[11,0,1],[0,22,1]],[[11,0,0],[0,22,0]],[[11,0,1],[0,22,1]],[[11,0,2],[0,22,2]],[[11,0,3],[0,23,1]],[[11,0,4],[0,23,0]],[[12,0,4],[0,23,1]],[[12,0,3],[0,23,2]],[[12,0,2],[1,23,1]],[[12,0,1],[1,23,0]],[[12,0,0],[0,24,0]],[[12,0,1],[0,24,1]],[[12,0,2],[2,23,1]],[[12,0,3],[2,23,0]],[[12,0,4],[0,25,0]],[[13,0,3],[0,25,1]],[[13,0,2],[3,23,1]],[[13,0,1],[3,23,0]],[[13,0,0],[0,26,0]],[[13,0,1],[0,26,1]],[[13,0,2],[0,26,2]],[[13,0,3],[0,27,1]],[[13,0,4],[0,27,0]],[[14,0,3],[0,27,1]],[[14,0,2],[0,27,2]],[[14,0,1],[0,28,1]],[[14,0,0],[0,28,0]],[[14,0,1],[0,28,1]],[[14,0,2],[0,28,2]],[[14,0,3],[0,29,1]],[[14,0,4],[0,29,0]],[[15,0,3],[0,29,1]],[[15,0,2],[0,29,2]],[[15,0,1],[0,30,1]],[[15,0,0],[0,30,0]],[[15,0,1],[0,30,1]],[[15,0,2],[0,30,2]],[[15,0,3],[0,31,1]],[[15,0,4],[0,31,0]],[[16,0,4],[0,31,1]],[[16,0,3],[0,31,2]],[[16,0,2],[1,31,1]],[[16,0,1],[1,31,0]],[[16,0,0],[4,28,0]],[[16,0,1],[4,28,1]],[[16,0,2],[2,31,1]],[[16,0,3],[2,31,0]],[[16,0,4],[4,29,0]],[[17,0,3],[4,29,1]],[[17,0,2],[3,31,1]],[[17,0,1],[3,31,0]],[[17,0,0],[4,30,0]],[[17,0,1],[4,30,1]],[[17,0,2],[4,30,2]],[[17,0,3],[4,31,1]],[[17,0,4],[4,31,0]],[[18,0,3],[4,31,1]],[[18,0,2],[4,31,2]],[[18,0,1],[5,31,1]],[[18,0,0],[5,31,0]],[[18,0,1],[5,31,1]],[[18,0,2],[5,31,2]],[[18,0,3],[6,31,1]],[[18,0,4],[6,31,0]],[[19,0,3],[6,31,1]],[[19,0,2],[6,31,2]],[[19,0,1],[7,31,1]],[[19,0,0],[7,31,0]],[[19,0,1],[7,31,1]],[[19,0,2],[7,31,2]],[[19,0,3],[8,31,1]],[[19,0,4],[8,31,0]],[[20,0,4],[8,31,1]],[[20,0,3],[8,31,2]],[[20,0,2],[9,31,1]],[[20,0,1],[9,31,0]],[[20,0,0],[12,28,0]],[[20,0,1],[12,28,1]],[[20,0,2],[10,31,1]],[[20,0,3],[10,31,0]],[[20,0,4],[12,29,0]],[[21,0,3],[12,29,1]],[[21,0,2],[11,31,1]],[[21,0,1],[11,31,0]],[[21,0,0],[12,30,0]],[[21,0,1],[12,30,1]],[[21,0,2],[12,30,2]],[[21,0,3],[12,31,1]],[[21,0,4],[12,31,0]],[[22,0,3],[12,31,1]],[[22,0,2],[12,31,2]],[[22,0,1],[13,31,1]],[[22,0,0],[13,31,0]],[[22,0,1],[13,31,1]],[[22,0,2],[13,31,2]],[[22,0,3],[14,31,1]],[[22,0,4],[14,31,0]],[[23,0,3],[14,31,1]],[[23,0,2],[14,31,2]],[[23,0,1],[15,31,1]],[[23,0,0],[15,31,0]],[[23,0,1],[15,31,1]],[[23,0,2],[15,31,2]],[[23,0,3],[16,31,1]],[[23,0,4],[16,31,0]],[[24,0,4],[16,31,1]],[[24,0,3],[16,31,2]],[[24,0,2],[17,31,1]],[[24,0,1],[17,31,0]],[[24,0,0],[20,28,0]],[[24,0,1],[20,28,1]],[[24,0,2],[18,31,1]],[[24,0,3],[18,31,0]],[[24,0,4],[20,29,0]],[[25,0,3],[20,29,1]],[[25,0,2],[19,31,1]],[[25,0,1],[19,31,0]],[[25,0,0],[20,30,0]],[[25,0,1],[20,30,1]],[[25,0,2],[20,30,2]],[[25,0,3],[20,31,1]],[[25,0,4],[20,31,0]],[[26,0,3],[20,31,1]],[[26,0,2],[20,31,2]],[[26,0,1],[21,31,1]],[[26,0,0],[21,31,0]],[[26,0,1],[21,31,1]],[[26,0,2],[21,31,2]],[[26,0,3],[22,31,1]],[[26,0,4],[22,31,0]],[[27,0,3],[22,31,1]],[[27,0,2],[22,31,2]],[[27,0,1],[23,31,1]],[[27,0,0],[23,31,0]],[[27,0,1],[23,31,1]],[[27,0,2],[23,31,2]],[[27,0,3],[24,31,1]],[[27,0,4],[24,31,0]],[[28,0,4],[24,31,1]],[[28,0,3],[24,31,2]],[[28,0,2],[25,31,1]],[[28,0,1],[25,31,0]],[[28,0,0],[28,28,0]],[[28,0,1],[28,28,1]],[[28,0,2],[26,31,1]],[[28,0,3],[26,31,0]],[[28,0,4],[28,29,0]],[[29,0,3],[28,29,1]],[[29,0,2],[27,31,1]],[[29,0,1],[27,31,0]],[[29,0,0],[28,30,0]],[[29,0,1],[28,30,1]],[[29,0,2],[28,30,2]],[[29,0,3],[28,31,1]],[[29,0,4],[28,31,0]],[[30,0,3],[28,31,1]],[[30,0,2],[28,31,2]],[[30,0,1],[29,31,1]],[[30,0,0],[29,31,0]],[[30,0,1],[29,31,1]],[[30,0,2],[29,31,2]],[[30,0,3],[30,31,1]],[[30,0,4],[30,31,0]],[[31,0,3],[30,31,1]],[[31,0,2],[30,31,2]],[[31,0,1],[31,31,1]],[[31,0,0],[31,31,0]]],O=[[[0,0,0],[0,0,0]],[[0,0,1],[0,1,1]],[[0,0,2],[0,1,0]],[[1,0,1],[0,2,1]],[[1,0,0],[0,2,0]],[[1,0,1],[0,3,1]],[[1,0,2],[0,3,0]],[[2,0,1],[0,4,1]],[[2,0,0],[0,4,0]],[[2,0,1],[0,5,1]],[[2,0,2],[0,5,0]],[[3,0,1],[0,6,1]],[[3,0,0],[0,6,0]],[[3,0,1],[0,7,1]],[[3,0,2],[0,7,0]],[[4,0,1],[0,8,1]],[[4,0,0],[0,8,0]],[[4,0,1],[0,9,1]],[[4,0,2],[0,9,0]],[[5,0,1],[0,10,1]],[[5,0,0],[0,10,0]],[[5,0,1],[0,11,1]],[[5,0,2],[0,11,0]],[[6,0,1],[0,12,1]],[[6,0,0],[0,12,0]],[[6,0,1],[0,13,1]],[[6,0,2],[0,13,0]],[[7,0,1],[0,14,1]],[[7,0,0],[0,14,0]],[[7,0,1],[0,15,1]],[[7,0,2],[0,15,0]],[[8,0,1],[0,16,1]],[[8,0,0],[0,16,0]],[[8,0,1],[0,17,1]],[[8,0,2],[0,17,0]],[[9,0,1],[0,18,1]],[[9,0,0],[0,18,0]],[[9,0,1],[0,19,1]],[[9,0,2],[0,19,0]],[[10,0,1],[0,20,1]],[[10,0,0],[0,20,0]],[[10,0,1],[0,21,1]],[[10,0,2],[0,21,0]],[[11,0,1],[0,22,1]],[[11,0,0],[0,22,0]],[[11,0,1],[0,23,1]],[[11,0,2],[0,23,0]],[[12,0,1],[0,24,1]],[[12,0,0],[0,24,0]],[[12,0,1],[0,25,1]],[[12,0,2],[0,25,0]],[[13,0,1],[0,26,1]],[[13,0,0],[0,26,0]],[[13,0,1],[0,27,1]],[[13,0,2],[0,27,0]],[[14,0,1],[0,28,1]],[[14,0,0],[0,28,0]],[[14,0,1],[0,29,1]],[[14,0,2],[0,29,0]],[[15,0,1],[0,30,1]],[[15,0,0],[0,30,0]],[[15,0,1],[0,31,1]],[[15,0,2],[0,31,0]],[[16,0,2],[1,31,1]],[[16,0,1],[1,31,0]],[[16,0,0],[0,32,0]],[[16,0,1],[2,31,0]],[[16,0,2],[0,33,0]],[[17,0,1],[3,31,0]],[[17,0,0],[0,34,0]],[[17,0,1],[4,31,0]],[[17,0,2],[0,35,0]],[[18,0,1],[5,31,0]],[[18,0,0],[0,36,0]],[[18,0,1],[6,31,0]],[[18,0,2],[0,37,0]],[[19,0,1],[7,31,0]],[[19,0,0],[0,38,0]],[[19,0,1],[8,31,0]],[[19,0,2],[0,39,0]],[[20,0,1],[9,31,0]],[[20,0,0],[0,40,0]],[[20,0,1],[10,31,0]],[[20,0,2],[0,41,0]],[[21,0,1],[11,31,0]],[[21,0,0],[0,42,0]],[[21,0,1],[12,31,0]],[[21,0,2],[0,43,0]],[[22,0,1],[13,31,0]],[[22,0,0],[0,44,0]],[[22,0,1],[14,31,0]],[[22,0,2],[0,45,0]],[[23,0,1],[15,31,0]],[[23,0,0],[0,46,0]],[[23,0,1],[0,47,1]],[[23,0,2],[0,47,0]],[[24,0,1],[0,48,1]],[[24,0,0],[0,48,0]],[[24,0,1],[0,49,1]],[[24,0,2],[0,49,0]],[[25,0,1],[0,50,1]],[[25,0,0],[0,50,0]],[[25,0,1],[0,51,1]],[[25,0,2],[0,51,0]],[[26,0,1],[0,52,1]],[[26,0,0],[0,52,0]],[[26,0,1],[0,53,1]],[[26,0,2],[0,53,0]],[[27,0,1],[0,54,1]],[[27,0,0],[0,54,0]],[[27,0,1],[0,55,1]],[[27,0,2],[0,55,0]],[[28,0,1],[0,56,1]],[[28,0,0],[0,56,0]],[[28,0,1],[0,57,1]],[[28,0,2],[0,57,0]],[[29,0,1],[0,58,1]],[[29,0,0],[0,58,0]],[[29,0,1],[0,59,1]],[[29,0,2],[0,59,0]],[[30,0,1],[0,60,1]],[[30,0,0],[0,60,0]],[[30,0,1],[0,61,1]],[[30,0,2],[0,61,0]],[[31,0,1],[0,62,1]],[[31,0,0],[0,62,0]],[[31,0,1],[0,63,1]],[[31,0,2],[0,63,0]],[[32,0,2],[1,63,1]],[[32,0,1],[1,63,0]],[[32,0,0],[16,48,0]],[[32,0,1],[2,63,0]],[[32,0,2],[16,49,0]],[[33,0,1],[3,63,0]],[[33,0,0],[16,50,0]],[[33,0,1],[4,63,0]],[[33,0,2],[16,51,0]],[[34,0,1],[5,63,0]],[[34,0,0],[16,52,0]],[[34,0,1],[6,63,0]],[[34,0,2],[16,53,0]],[[35,0,1],[7,63,0]],[[35,0,0],[16,54,0]],[[35,0,1],[8,63,0]],[[35,0,2],[16,55,0]],[[36,0,1],[9,63,0]],[[36,0,0],[16,56,0]],[[36,0,1],[10,63,0]],[[36,0,2],[16,57,0]],[[37,0,1],[11,63,0]],[[37,0,0],[16,58,0]],[[37,0,1],[12,63,0]],[[37,0,2],[16,59,0]],[[38,0,1],[13,63,0]],[[38,0,0],[16,60,0]],[[38,0,1],[14,63,0]],[[38,0,2],[16,61,0]],[[39,0,1],[15,63,0]],[[39,0,0],[16,62,0]],[[39,0,1],[16,63,1]],[[39,0,2],[16,63,0]],[[40,0,1],[17,63,1]],[[40,0,0],[17,63,0]],[[40,0,1],[18,63,1]],[[40,0,2],[18,63,0]],[[41,0,1],[19,63,1]],[[41,0,0],[19,63,0]],[[41,0,1],[20,63,1]],[[41,0,2],[20,63,0]],[[42,0,1],[21,63,1]],[[42,0,0],[21,63,0]],[[42,0,1],[22,63,1]],[[42,0,2],[22,63,0]],[[43,0,1],[23,63,1]],[[43,0,0],[23,63,0]],[[43,0,1],[24,63,1]],[[43,0,2],[24,63,0]],[[44,0,1],[25,63,1]],[[44,0,0],[25,63,0]],[[44,0,1],[26,63,1]],[[44,0,2],[26,63,0]],[[45,0,1],[27,63,1]],[[45,0,0],[27,63,0]],[[45,0,1],[28,63,1]],[[45,0,2],[28,63,0]],[[46,0,1],[29,63,1]],[[46,0,0],[29,63,0]],[[46,0,1],[30,63,1]],[[46,0,2],[30,63,0]],[[47,0,1],[31,63,1]],[[47,0,0],[31,63,0]],[[47,0,1],[32,63,1]],[[47,0,2],[32,63,0]],[[48,0,2],[33,63,1]],[[48,0,1],[33,63,0]],[[48,0,0],[48,48,0]],[[48,0,1],[34,63,0]],[[48,0,2],[48,49,0]],[[49,0,1],[35,63,0]],[[49,0,0],[48,50,0]],[[49,0,1],[36,63,0]],[[49,0,2],[48,51,0]],[[50,0,1],[37,63,0]],[[50,0,0],[48,52,0]],[[50,0,1],[38,63,0]],[[50,0,2],[48,53,0]],[[51,0,1],[39,63,0]],[[51,0,0],[48,54,0]],[[51,0,1],[40,63,0]],[[51,0,2],[48,55,0]],[[52,0,1],[41,63,0]],[[52,0,0],[48,56,0]],[[52,0,1],[42,63,0]],[[52,0,2],[48,57,0]],[[53,0,1],[43,63,0]],[[53,0,0],[48,58,0]],[[53,0,1],[44,63,0]],[[53,0,2],[48,59,0]],[[54,0,1],[45,63,0]],[[54,0,0],[48,60,0]],[[54,0,1],[46,63,0]],[[54,0,2],[48,61,0]],[[55,0,1],[47,63,0]],[[55,0,0],[48,62,0]],[[55,0,1],[48,63,1]],[[55,0,2],[48,63,0]],[[56,0,1],[49,63,1]],[[56,0,0],[49,63,0]],[[56,0,1],[50,63,1]],[[56,0,2],[50,63,0]],[[57,0,1],[51,63,1]],[[57,0,0],[51,63,0]],[[57,0,1],[52,63,1]],[[57,0,2],[52,63,0]],[[58,0,1],[53,63,1]],[[58,0,0],[53,63,0]],[[58,0,1],[54,63,1]],[[58,0,2],[54,63,0]],[[59,0,1],[55,63,1]],[[59,0,0],[55,63,0]],[[59,0,1],[56,63,1]],[[59,0,2],[56,63,0]],[[60,0,1],[57,63,1]],[[60,0,0],[57,63,0]],[[60,0,1],[58,63,1]],[[60,0,2],[58,63,0]],[[61,0,1],[59,63,1]],[[61,0,0],[59,63,0]],[[61,0,1],[60,63,1]],[[61,0,2],[60,63,0]],[[62,0,1],[61,63,1]],[[62,0,0],[61,63,0]],[[62,0,1],[62,63,1]],[[62,0,2],[62,63,0]],[[63,0,1],[63,63,1]],[[63,0,0],[63,63,0]]],k=[[[0,0,0],[0,0,0]],[[0,0,1],[0,1,1]],[[0,0,2],[0,1,0]],[[0,0,3],[0,1,1]],[[0,0,4],[0,2,1]],[[1,0,3],[0,2,0]],[[1,0,2],[0,2,1]],[[1,0,1],[0,3,1]],[[1,0,0],[0,3,0]],[[1,0,1],[1,2,1]],[[1,0,2],[1,2,0]],[[1,0,3],[0,4,0]],[[1,0,4],[0,5,1]],[[2,0,3],[0,5,0]],[[2,0,2],[0,5,1]],[[2,0,1],[0,6,1]],[[2,0,0],[0,6,0]],[[2,0,1],[2,3,1]],[[2,0,2],[2,3,0]],[[2,0,3],[0,7,0]],[[2,0,4],[1,6,1]],[[3,0,3],[1,6,0]],[[3,0,2],[0,8,0]],[[3,0,1],[0,9,1]],[[3,0,0],[0,9,0]],[[3,0,1],[0,9,1]],[[3,0,2],[0,10,1]],[[3,0,3],[0,10,0]],[[3,0,4],[2,7,1]],[[4,0,4],[2,7,0]],[[4,0,3],[0,11,0]],[[4,0,2],[1,10,1]],[[4,0,1],[1,10,0]],[[4,0,0],[0,12,0]],[[4,0,1],[0,13,1]],[[4,0,2],[0,13,0]],[[4,0,3],[0,13,1]],[[4,0,4],[0,14,1]],[[5,0,3],[0,14,0]],[[5,0,2],[2,11,1]],[[5,0,1],[2,11,0]],[[5,0,0],[0,15,0]],[[5,0,1],[1,14,1]],[[5,0,2],[1,14,0]],[[5,0,3],[0,16,0]],[[5,0,4],[0,17,1]],[[6,0,3],[0,17,0]],[[6,0,2],[0,17,1]],[[6,0,1],[0,18,1]],[[6,0,0],[0,18,0]],[[6,0,1],[2,15,1]],[[6,0,2],[2,15,0]],[[6,0,3],[0,19,0]],[[6,0,4],[1,18,1]],[[7,0,3],[1,18,0]],[[7,0,2],[0,20,0]],[[7,0,1],[0,21,1]],[[7,0,0],[0,21,0]],[[7,0,1],[0,21,1]],[[7,0,2],[0,22,1]],[[7,0,3],[0,22,0]],[[7,0,4],[2,19,1]],[[8,0,4],[2,19,0]],[[8,0,3],[0,23,0]],[[8,0,2],[1,22,1]],[[8,0,1],[1,22,0]],[[8,0,0],[0,24,0]],[[8,0,1],[0,25,1]],[[8,0,2],[0,25,0]],[[8,0,3],[0,25,1]],[[8,0,4],[0,26,1]],[[9,0,3],[0,26,0]],[[9,0,2],[2,23,1]],[[9,0,1],[2,23,0]],[[9,0,0],[0,27,0]],[[9,0,1],[1,26,1]],[[9,0,2],[1,26,0]],[[9,0,3],[0,28,0]],[[9,0,4],[0,29,1]],[[10,0,3],[0,29,0]],[[10,0,2],[0,29,1]],[[10,0,1],[0,30,1]],[[10,0,0],[0,30,0]],[[10,0,1],[2,27,1]],[[10,0,2],[2,27,0]],[[10,0,3],[0,31,0]],[[10,0,4],[1,30,1]],[[11,0,3],[1,30,0]],[[11,0,2],[4,24,0]],[[11,0,1],[1,31,1]],[[11,0,0],[1,31,0]],[[11,0,1],[1,31,1]],[[11,0,2],[2,30,1]],[[11,0,3],[2,30,0]],[[11,0,4],[2,31,1]],[[12,0,4],[2,31,0]],[[12,0,3],[4,27,0]],[[12,0,2],[3,30,1]],[[12,0,1],[3,30,0]],[[12,0,0],[4,28,0]],[[12,0,1],[3,31,1]],[[12,0,2],[3,31,0]],[[12,0,3],[3,31,1]],[[12,0,4],[4,30,1]],[[13,0,3],[4,30,0]],[[13,0,2],[6,27,1]],[[13,0,1],[6,27,0]],[[13,0,0],[4,31,0]],[[13,0,1],[5,30,1]],[[13,0,2],[5,30,0]],[[13,0,3],[8,24,0]],[[13,0,4],[5,31,1]],[[14,0,3],[5,31,0]],[[14,0,2],[5,31,1]],[[14,0,1],[6,30,1]],[[14,0,0],[6,30,0]],[[14,0,1],[6,31,1]],[[14,0,2],[6,31,0]],[[14,0,3],[8,27,0]],[[14,0,4],[7,30,1]],[[15,0,3],[7,30,0]],[[15,0,2],[8,28,0]],[[15,0,1],[7,31,1]],[[15,0,0],[7,31,0]],[[15,0,1],[7,31,1]],[[15,0,2],[8,30,1]],[[15,0,3],[8,30,0]],[[15,0,4],[10,27,1]],[[16,0,4],[10,27,0]],[[16,0,3],[8,31,0]],[[16,0,2],[9,30,1]],[[16,0,1],[9,30,0]],[[16,0,0],[12,24,0]],[[16,0,1],[9,31,1]],[[16,0,2],[9,31,0]],[[16,0,3],[9,31,1]],[[16,0,4],[10,30,1]],[[17,0,3],[10,30,0]],[[17,0,2],[10,31,1]],[[17,0,1],[10,31,0]],[[17,0,0],[12,27,0]],[[17,0,1],[11,30,1]],[[17,0,2],[11,30,0]],[[17,0,3],[12,28,0]],[[17,0,4],[11,31,1]],[[18,0,3],[11,31,0]],[[18,0,2],[11,31,1]],[[18,0,1],[12,30,1]],[[18,0,0],[12,30,0]],[[18,0,1],[14,27,1]],[[18,0,2],[14,27,0]],[[18,0,3],[12,31,0]],[[18,0,4],[13,30,1]],[[19,0,3],[13,30,0]],[[19,0,2],[16,24,0]],[[19,0,1],[13,31,1]],[[19,0,0],[13,31,0]],[[19,0,1],[13,31,1]],[[19,0,2],[14,30,1]],[[19,0,3],[14,30,0]],[[19,0,4],[14,31,1]],[[20,0,4],[14,31,0]],[[20,0,3],[16,27,0]],[[20,0,2],[15,30,1]],[[20,0,1],[15,30,0]],[[20,0,0],[16,28,0]],[[20,0,1],[15,31,1]],[[20,0,2],[15,31,0]],[[20,0,3],[15,31,1]],[[20,0,4],[16,30,1]],[[21,0,3],[16,30,0]],[[21,0,2],[18,27,1]],[[21,0,1],[18,27,0]],[[21,0,0],[16,31,0]],[[21,0,1],[17,30,1]],[[21,0,2],[17,30,0]],[[21,0,3],[20,24,0]],[[21,0,4],[17,31,1]],[[22,0,3],[17,31,0]],[[22,0,2],[17,31,1]],[[22,0,1],[18,30,1]],[[22,0,0],[18,30,0]],[[22,0,1],[18,31,1]],[[22,0,2],[18,31,0]],[[22,0,3],[20,27,0]],[[22,0,4],[19,30,1]],[[23,0,3],[19,30,0]],[[23,0,2],[20,28,0]],[[23,0,1],[19,31,1]],[[23,0,0],[19,31,0]],[[23,0,1],[19,31,1]],[[23,0,2],[20,30,1]],[[23,0,3],[20,30,0]],[[23,0,4],[22,27,1]],[[24,0,4],[22,27,0]],[[24,0,3],[20,31,0]],[[24,0,2],[21,30,1]],[[24,0,1],[21,30,0]],[[24,0,0],[24,24,0]],[[24,0,1],[21,31,1]],[[24,0,2],[21,31,0]],[[24,0,3],[21,31,1]],[[24,0,4],[22,30,1]],[[25,0,3],[22,30,0]],[[25,0,2],[22,31,1]],[[25,0,1],[22,31,0]],[[25,0,0],[24,27,0]],[[25,0,1],[23,30,1]],[[25,0,2],[23,30,0]],[[25,0,3],[24,28,0]],[[25,0,4],[23,31,1]],[[26,0,3],[23,31,0]],[[26,0,2],[23,31,1]],[[26,0,1],[24,30,1]],[[26,0,0],[24,30,0]],[[26,0,1],[26,27,1]],[[26,0,2],[26,27,0]],[[26,0,3],[24,31,0]],[[26,0,4],[25,30,1]],[[27,0,3],[25,30,0]],[[27,0,2],[28,24,0]],[[27,0,1],[25,31,1]],[[27,0,0],[25,31,0]],[[27,0,1],[25,31,1]],[[27,0,2],[26,30,1]],[[27,0,3],[26,30,0]],[[27,0,4],[26,31,1]],[[28,0,4],[26,31,0]],[[28,0,3],[28,27,0]],[[28,0,2],[27,30,1]],[[28,0,1],[27,30,0]],[[28,0,0],[28,28,0]],[[28,0,1],[27,31,1]],[[28,0,2],[27,31,0]],[[28,0,3],[27,31,1]],[[28,0,4],[28,30,1]],[[29,0,3],[28,30,0]],[[29,0,2],[30,27,1]],[[29,0,1],[30,27,0]],[[29,0,0],[28,31,0]],[[29,0,1],[29,30,1]],[[29,0,2],[29,30,0]],[[29,0,3],[29,30,1]],[[29,0,4],[29,31,1]],[[30,0,3],[29,31,0]],[[30,0,2],[29,31,1]],[[30,0,1],[30,30,1]],[[30,0,0],[30,30,0]],[[30,0,1],[30,31,1]],[[30,0,2],[30,31,0]],[[30,0,3],[30,31,1]],[[30,0,4],[31,30,1]],[[31,0,3],[31,30,0]],[[31,0,2],[31,30,1]],[[31,0,1],[31,31,1]],[[31,0,0],[31,31,0]]],R=[[[0,0,0],[0,0,0]],[[0,0,1],[0,1,0]],[[0,0,2],[0,2,0]],[[1,0,1],[0,3,1]],[[1,0,0],[0,3,0]],[[1,0,1],[0,4,0]],[[1,0,2],[0,5,0]],[[2,0,1],[0,6,1]],[[2,0,0],[0,6,0]],[[2,0,1],[0,7,0]],[[2,0,2],[0,8,0]],[[3,0,1],[0,9,1]],[[3,0,0],[0,9,0]],[[3,0,1],[0,10,0]],[[3,0,2],[0,11,0]],[[4,0,1],[0,12,1]],[[4,0,0],[0,12,0]],[[4,0,1],[0,13,0]],[[4,0,2],[0,14,0]],[[5,0,1],[0,15,1]],[[5,0,0],[0,15,0]],[[5,0,1],[0,16,0]],[[5,0,2],[1,15,0]],[[6,0,1],[0,17,0]],[[6,0,0],[0,18,0]],[[6,0,1],[0,19,0]],[[6,0,2],[3,14,0]],[[7,0,1],[0,20,0]],[[7,0,0],[0,21,0]],[[7,0,1],[0,22,0]],[[7,0,2],[4,15,0]],[[8,0,1],[0,23,0]],[[8,0,0],[0,24,0]],[[8,0,1],[0,25,0]],[[8,0,2],[6,14,0]],[[9,0,1],[0,26,0]],[[9,0,0],[0,27,0]],[[9,0,1],[0,28,0]],[[9,0,2],[7,15,0]],[[10,0,1],[0,29,0]],[[10,0,0],[0,30,0]],[[10,0,1],[0,31,0]],[[10,0,2],[9,14,0]],[[11,0,1],[0,32,0]],[[11,0,0],[0,33,0]],[[11,0,1],[2,30,0]],[[11,0,2],[0,34,0]],[[12,0,1],[0,35,0]],[[12,0,0],[0,36,0]],[[12,0,1],[3,31,0]],[[12,0,2],[0,37,0]],[[13,0,1],[0,38,0]],[[13,0,0],[0,39,0]],[[13,0,1],[5,30,0]],[[13,0,2],[0,40,0]],[[14,0,1],[0,41,0]],[[14,0,0],[0,42,0]],[[14,0,1],[6,31,0]],[[14,0,2],[0,43,0]],[[15,0,1],[0,44,0]],[[15,0,0],[0,45,0]],[[15,0,1],[8,30,0]],[[15,0,2],[0,46,0]],[[16,0,2],[0,47,0]],[[16,0,1],[1,46,0]],[[16,0,0],[0,48,0]],[[16,0,1],[0,49,0]],[[16,0,2],[0,50,0]],[[17,0,1],[2,47,0]],[[17,0,0],[0,51,0]],[[17,0,1],[0,52,0]],[[17,0,2],[0,53,0]],[[18,0,1],[4,46,0]],[[18,0,0],[0,54,0]],[[18,0,1],[0,55,0]],[[18,0,2],[0,56,0]],[[19,0,1],[5,47,0]],[[19,0,0],[0,57,0]],[[19,0,1],[0,58,0]],[[19,0,2],[0,59,0]],[[20,0,1],[7,46,0]],[[20,0,0],[0,60,0]],[[20,0,1],[0,61,0]],[[20,0,2],[0,62,0]],[[21,0,1],[8,47,0]],[[21,0,0],[0,63,0]],[[21,0,1],[1,62,0]],[[21,0,2],[1,63,0]],[[22,0,1],[10,46,0]],[[22,0,0],[2,62,0]],[[22,0,1],[2,63,0]],[[22,0,2],[3,62,0]],[[23,0,1],[11,47,0]],[[23,0,0],[3,63,0]],[[23,0,1],[4,62,0]],[[23,0,2],[4,63,0]],[[24,0,1],[13,46,0]],[[24,0,0],[5,62,0]],[[24,0,1],[5,63,0]],[[24,0,2],[6,62,0]],[[25,0,1],[14,47,0]],[[25,0,0],[6,63,0]],[[25,0,1],[7,62,0]],[[25,0,2],[7,63,0]],[[26,0,1],[16,45,0]],[[26,0,0],[8,62,0]],[[26,0,1],[8,63,0]],[[26,0,2],[9,62,0]],[[27,0,1],[16,48,0]],[[27,0,0],[9,63,0]],[[27,0,1],[10,62,0]],[[27,0,2],[10,63,0]],[[28,0,1],[16,51,0]],[[28,0,0],[11,62,0]],[[28,0,1],[11,63,0]],[[28,0,2],[12,62,0]],[[29,0,1],[16,54,0]],[[29,0,0],[12,63,0]],[[29,0,1],[13,62,0]],[[29,0,2],[13,63,0]],[[30,0,1],[16,57,0]],[[30,0,0],[14,62,0]],[[30,0,1],[14,63,0]],[[30,0,2],[15,62,0]],[[31,0,1],[16,60,0]],[[31,0,0],[15,63,0]],[[31,0,1],[24,46,0]],[[31,0,2],[16,62,0]],[[32,0,2],[16,63,0]],[[32,0,1],[17,62,0]],[[32,0,0],[25,47,0]],[[32,0,1],[17,63,0]],[[32,0,2],[18,62,0]],[[33,0,1],[18,63,0]],[[33,0,0],[27,46,0]],[[33,0,1],[19,62,0]],[[33,0,2],[19,63,0]],[[34,0,1],[20,62,0]],[[34,0,0],[28,47,0]],[[34,0,1],[20,63,0]],[[34,0,2],[21,62,0]],[[35,0,1],[21,63,0]],[[35,0,0],[30,46,0]],[[35,0,1],[22,62,0]],[[35,0,2],[22,63,0]],[[36,0,1],[23,62,0]],[[36,0,0],[31,47,0]],[[36,0,1],[23,63,0]],[[36,0,2],[24,62,0]],[[37,0,1],[24,63,0]],[[37,0,0],[32,47,0]],[[37,0,1],[25,62,0]],[[37,0,2],[25,63,0]],[[38,0,1],[26,62,0]],[[38,0,0],[32,50,0]],[[38,0,1],[26,63,0]],[[38,0,2],[27,62,0]],[[39,0,1],[27,63,0]],[[39,0,0],[32,53,0]],[[39,0,1],[28,62,0]],[[39,0,2],[28,63,0]],[[40,0,1],[29,62,0]],[[40,0,0],[32,56,0]],[[40,0,1],[29,63,0]],[[40,0,2],[30,62,0]],[[41,0,1],[30,63,0]],[[41,0,0],[32,59,0]],[[41,0,1],[31,62,0]],[[41,0,2],[31,63,0]],[[42,0,1],[32,61,0]],[[42,0,0],[32,62,0]],[[42,0,1],[32,63,0]],[[42,0,2],[41,46,0]],[[43,0,1],[33,62,0]],[[43,0,0],[33,63,0]],[[43,0,1],[34,62,0]],[[43,0,2],[42,47,0]],[[44,0,1],[34,63,0]],[[44,0,0],[35,62,0]],[[44,0,1],[35,63,0]],[[44,0,2],[44,46,0]],[[45,0,1],[36,62,0]],[[45,0,0],[36,63,0]],[[45,0,1],[37,62,0]],[[45,0,2],[45,47,0]],[[46,0,1],[37,63,0]],[[46,0,0],[38,62,0]],[[46,0,1],[38,63,0]],[[46,0,2],[47,46,0]],[[47,0,1],[39,62,0]],[[47,0,0],[39,63,0]],[[47,0,1],[40,62,0]],[[47,0,2],[48,46,0]],[[48,0,2],[40,63,0]],[[48,0,1],[41,62,0]],[[48,0,0],[41,63,0]],[[48,0,1],[48,49,0]],[[48,0,2],[42,62,0]],[[49,0,1],[42,63,0]],[[49,0,0],[43,62,0]],[[49,0,1],[48,52,0]],[[49,0,2],[43,63,0]],[[50,0,1],[44,62,0]],[[50,0,0],[44,63,0]],[[50,0,1],[48,55,0]],[[50,0,2],[45,62,0]],[[51,0,1],[45,63,0]],[[51,0,0],[46,62,0]],[[51,0,1],[48,58,0]],[[51,0,2],[46,63,0]],[[52,0,1],[47,62,0]],[[52,0,0],[47,63,0]],[[52,0,1],[48,61,0]],[[52,0,2],[48,62,0]],[[53,0,1],[56,47,0]],[[53,0,0],[48,63,0]],[[53,0,1],[49,62,0]],[[53,0,2],[49,63,0]],[[54,0,1],[58,46,0]],[[54,0,0],[50,62,0]],[[54,0,1],[50,63,0]],[[54,0,2],[51,62,0]],[[55,0,1],[59,47,0]],[[55,0,0],[51,63,0]],[[55,0,1],[52,62,0]],[[55,0,2],[52,63,0]],[[56,0,1],[61,46,0]],[[56,0,0],[53,62,0]],[[56,0,1],[53,63,0]],[[56,0,2],[54,62,0]],[[57,0,1],[62,47,0]],[[57,0,0],[54,63,0]],[[57,0,1],[55,62,0]],[[57,0,2],[55,63,0]],[[58,0,1],[56,62,1]],[[58,0,0],[56,62,0]],[[58,0,1],[56,63,0]],[[58,0,2],[57,62,0]],[[59,0,1],[57,63,1]],[[59,0,0],[57,63,0]],[[59,0,1],[58,62,0]],[[59,0,2],[58,63,0]],[[60,0,1],[59,62,1]],[[60,0,0],[59,62,0]],[[60,0,1],[59,63,0]],[[60,0,2],[60,62,0]],[[61,0,1],[60,63,1]],[[61,0,0],[60,63,0]],[[61,0,1],[61,62,0]],[[61,0,2],[61,63,0]],[[62,0,1],[62,62,1]],[[62,0,0],[62,62,0]],[[62,0,1],[62,63,0]],[[62,0,2],[63,62,0]],[[63,0,1],[63,63,1]],[[63,0,0],[63,63,0]]];function I(t,e){const r=parseInt(t+.5);return r<0?0:r}function A(t){return I(31*t.x)<<11|I(63*t.y)<<5|I(31*t.z)}function C(t,e,r,s,n){s[n+0]=255&t,s[n+1]=t>>8,s[n+2]=255&e,s[n+3]=e>>8;for(let t=0;t<4;t++)s[n+4+t]=r[4*t+0]|r[4*t+1]<<2|r[4*t+2]<<4|r[4*t+3]<<6}function F(t,e,r,s,n){let i,a=A(t),o=A(e);a<=o?i=r.slice():([a,o]=[o,a],i=r.map(t=>0===t?1:1===t?0:t)),C(a,o,i,s,n)}function E(t,e,r,s,n){let i,a=A(t),o=A(e);a<o?([a,o]=[o,a],i=r.map(t=>3&(1^t))):i=a==o?new Array(16).fill(0):r.slice(),C(a,o,i,s,n)}class X{constructor(t,e,r){this.flags=r,this._count=0,this._transparent=!1,this._remap=[],this._weights=[],this._points=[];const s=!!(1&this.flags),n=!!(128&this.flags);for(let r=0;r<16;r++){if(0!=(e&1<<r))if(s&&t[4*r+3]<128)this._remap[r]=-1,this._transparent=!0;else for(let i=0;;i++){if(i==r){const e=t[4*r]/255,s=t[4*r+1]/255,i=t[4*r+2]/255,a=(t[4*r+3]+1)/256;this._points[this._count]=new T(e,s,i),this._weights[this._count]=n?a:1,this._remap[r]=this._count,this._count++;break}if(0!=(e&1<<i)&&t[4*r]==t[4*i]&&t[4*r+1]==t[4*i+1]&&t[4*r+2]==t[4*i+2]&&(t[4*i+3]>=128||!s)){const e=this._remap[i],s=(t[4*r+3]+1)/256;this._weights[e]+=n?s:1,this._remap[r]=e;break}}else this._remap[r]=-1}for(let t=0;t<this._count;++t)this._weights[t]=Math.sqrt(this._weights[t])}get transparent(){return this._transparent}get count(){return this._count}get points(){return Object.freeze(this._points.slice())}get weights(){return Object.freeze(this._weights.slice())}remapIndicesSingle(t,e){const r=this._remap.map(e=>-1===e?3:t);e.forEach((t,s)=>e[s]=r[s])}remapIndices(t,e){const r=this._remap.map(e=>-1===e?3:t[e]);e.forEach((t,s)=>e[s]=r[s])}}class B{constructor(t){this.colors=t,this.flags=t.flags}compress(t,e){!!(1&this.flags)?(this.compress3(t,e),this.colors.transparent||this.compress4(t,e)):this.compress4(t,e)}compress3(t,e){}compress4(t,e){}}class L extends B{constructor(t){super(t);const e=t.points[0];this.color=e.colorInt,this.start=new T(0),this.end=new T(0),this.index=0,this.error=1/0,this.bestError=1/0}compressBase(t,e){if(this.computeEndPoints(t),this.error<this.bestError){const t=new Uint8Array(16);this.colors.remapIndicesSingle(this.index,t),e(this.start,this.end,t),this.bestError=this.error}}compress3(t,e){const r=[V,O,V];this.compressBase(r,(r,s,n)=>F(r,s,n,t,e))}compress4(t,e){const r=[k,R,k];this.compressBase(r,(r,s,n)=>E(r,s,n,t,e))}computeEndPoints(t){this.error=1/0;for(let e=0;e<2;e++){const r=[];let s=0;for(let n=0;n<3;n++){const i=t[n],a=this.color[n];r[n]=i[a][e];const o=r[n][2];s+=o*o}s<this.error&&(this.start=new T(r[0][0]/31,r[1][0]/63,r[2][0]/31),this.end=new T(r[0][1]/31,r[1][1]/63,r[2][1]/31),this.index=2*e,this.error=s)}}}class U extends B{constructor(t){super(t),this.metric=new T(1),32&this.flags&&this.metric.set(.2126,.7152,.0722),this.start=new T(0),this.end=new T(0),this.bestError=1/0,this.computePoints()}compressBase(t,e){const{points:r}=this.colors;let s=0;const n=r.map(e=>{let r=1/0;const n=t.reduce((t,s,n)=>{const i=T.sub(e,s).multVector(this.metric).lengthSq;return i>=r?t:(r=i,n)},0);return s+=r,n});if(s<this.bestError){let t=new Uint8Array(16);this.colors.remapIndices(n,t),e(this.start,this.end,t),this.bestError=s}}compress3(t,e){const r=[this.start.clone(),this.end.clone(),T.interpolate(this.start,this.end,.5)];this.compressBase(r,(r,s,n)=>F(r,s,n,t,e))}compress4(t,e){const r=[this.start.clone(),this.end.clone(),T.interpolate(this.start,this.end,1/3),T.interpolate(this.start,this.end,2/3)];this.compressBase(r,(r,s,n)=>E(r,s,n,t,e))}computePoints(){const{count:t,points:e,weights:r}=this.colors;if(t<=0)return;const s=S(e,r);let n,i,a,o;n=i=e[0],a=o=T.dot(n,s);for(let r=1;r<t;r++){let t=T.dot(e[r],s);t<a?(n=e[r],a=t):t>o&&(i=e[r],o=t)}this.start=n.clampGrid().clone(),this.end=i.clampGrid().clone()}}class P extends B{constructor(t){super(t);this.iterationCount=t.flags&p?8:1,this.bestError=1/0,this.metric=new z(1),32&this.flags&&this.metric.set(.2126,.7152,.0722,0);const{points:e,weights:r}=this.colors;this.principle=S(e,r),this.order=new Uint8Array(128),this.pointsWeights=[],this.xSum_wSum=new z(0)}constructOrdering(t,e){const r=this.makeOrder(t);this.copyOrderToThisOrder(r,e);return!!this.checkOrderUnique(r,e)&&(this.copyOrderWeight(r),!0)}compress3(t,e){this.compressBase(t=>{let[e,,r,s]=t;const n=new z(.5,.5,.5,1/4),i=z.multiplyAdd(r,n,e),a=i.splatW,o=z.multiplyAdd(r,n,s);return{ax:i,aa:a,bx:o,bb:o.splatW,ab:z.multVector(r,n).splatW}},(r,s,n)=>F(r,s,n,t,e),2)}compress4(t,e){this.compressBase(t=>{let[e,r,s,n]=t;const i=new z(1/3,1/3,1/3,1/9),a=new z(2/3,2/3,2/3,4/9),o=new z(2/9),l=z.multiplyAdd(s,i,z.multiplyAdd(r,a,e)),u=l.splatW,c=z.multiplyAdd(r,i,z.multiplyAdd(s,a,n));return{ax:l,aa:u,bx:c,bb:c.splatW,ab:z.multVector(o,z.add(r,s)).splatW}},(r,s,n)=>E(r,s,n,t,e),3)}compressBase(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;this.constructOrdering(this.principle,0);let s={start:new z(0),end:new z(0),error:this.bestError,iteration:0,bestI:0,bestJ:0};3===r&&(s.bestK=0);const n=(e,r)=>{const n=t(e),i=this.computeOptimalPoints(n);return i.error<s.error&&(s=m(m({},i),r),!0)};for(let t=0;(this.clusterIterate(t,n,r),s.iteration==t)&&(t++,t!=this.iterationCount);){const e=z.sub(s.end,s.start).xyz;if(!this.constructOrdering(e,t))break}s.error<this.bestError&&this.saveBlock(s,e)}makeOrder(t){const{count:e,points:r}=this.colors,s=r.map((e,r)=>T.dot(e,t));return Array.from({length:e},(t,e)=>e).sort((t,e)=>s[t]-s[e]!=0?s[t]-s[e]:t-e)}copyOrderToThisOrder(t,e){const r=16*e;t.forEach((t,e)=>{this.order[r+e]=t})}checkOrderUnique(t,e){const{count:r}=this.colors;for(let s=0;s<e;s++){let e=16*s,n=!0;for(let s=0;s<r;s++)if(t[s]!==this.order[e+s]){n=!1;break}if(n)return!1}return!0}copyOrderWeight(t){const{count:e,points:r,weights:s}=this.colors;this.xSum_wSum.set(0);for(let n=0;n<e;n++){const e=t[n],i=r[e].toVec4(1),a=new z(s[e]),o=z.multVector(i,a);this.pointsWeights[n]=o,this.xSum_wSum.addVector(o)}}computeOptimalPoints(t){const{ax:e,bx:r,aa:s,bb:n,ab:i}=t,a=z.negativeMultiplySubtract(i,i,z.multVector(s,n)).reciprocal();let o=z.negativeMultiplySubtract(r,i,z.multVector(e,n)).multVector(a),l=z.negativeMultiplySubtract(e,i,z.multVector(r,s)).multVector(a);return o.clampGrid(),l.clampGrid(),{start:o,end:l,error:this.computeError(m({a:o,b:l},t))}}computeError(t){let{a:e,b:r,ax:s,bx:n,aa:i,bb:a,ab:o}=t;const l=new z(2),u=z.multiplyAdd(z.multVector(e,e),i,z.multVector(r,r).multVector(a)),c=z.negativeMultiplySubtract(e,s,z.multVector(e,r).multVector(o)),h=z.negativeMultiplySubtract(r,n,c),d=z.multiplyAdd(l,h,u),w=z.multVector(d,this.metric);return w.x+w.y+w.z}saveBlock(t,e){const{count:r}=this.colors,{start:s,end:n,iteration:i,error:a,bestI:o,bestJ:l,bestK:u=-1}=t,c=16*i,h=new Uint8Array(16),d=t=>t<o?0:t<l?2:t<u?3:1;for(let t=0;t<r;t++)h[this.order[c+t]]=d(t);const w=new Uint8Array(16);this.colors.remapIndices(h,w),e(s.xyz,n.xyz,w),this.bestError=a}clusterIterate(t,e){let r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:2;const{count:s}=this.colors,n=(e,s,n)=>{const i={bestI:e,bestJ:2===r?n:s,iteration:t};return 3===r&&(i.bestK=n),i};let i=new z(0);for(let t=0;t<s;t++){let a=new z(0);for(let o=t;;){let l=0==o?this.pointsWeights[0].clone():new z(0);for(let r=0==o?1:o;;){if(e([i,a,l,z.sub(this.xSum_wSum,l).subVector(a).subVector(i)],n(t,o,r)),r==s)break;l.addVector(this.pointsWeights[r]),r++}if(2===r)break;if(o===s)break;a.addVector(this.pointsWeights[o]),o++}i.addVector(this.pointsWeights[t])}}}function j(t){let e=Math.floor(t*(15/255)+.5);return e<0?0:e>15?15:e}function D(t,e,r,s){let n=W(t,e,5),i=W(t,e,7);n.error<=i.error?function(t,e,r){let{min:s,max:n,indices:i}=t;if(s>n){q(n,s,i.map(t=>0===t?1:1===t?0:t<=5?7-t:t),e,r)}else q(s,n,i,e,r)}(n,r,s):function(t,e,r){let{min:s,max:n,indices:i}=t;if(s>n){q(n,s,i.map(t=>0===t?1:1===t?0:9-t),e,r)}else q(s,n,i,e,r)}(i,r,s)}function W(t,e,r){let{min:s,max:n}=function(t,e,r){let s=255,n=0;for(let i=0;i<16;i++){if(0==(e&1<<i))continue;let a=t[4*i+3];5===r?(0!==a&&a<s&&(s=a),255!==a&&a>n&&(n=a)):(a<s&&(s=a),a>n&&(n=a))}s>n&&(s=n);n-s<r&&(n=Math.min(s+r,255));n-s<r&&(s=Math.max(n-r,0));return{min:s,max:n}}(t,e,r),i=N(s,n,r),a=new Uint8Array(16),o=function(t,e,r,s){let n=0;for(let i=0;i<16;++i){if(0==(e&1<<i)){s[i]=0;continue}let a=t[4*i+3],o=1/0,l=0;for(let t=0;t<8;++t){let e=a-r[t];e*=e,e<o&&(o=e,l=t)}s[i]=l,n+=o}return n}(t,e,i,a);return{min:s,max:n,indices:a,error:o}}function N(t,e,r){let s=[t,e,...Array.from({length:r-1},(s,n)=>Math.floor(((r-(n+1))*t+(n+1)*e)/r))];return 5===r&&(s[6]=0,s[7]=255),s}function q(t,e,r,s,n){s[n]=t,s[n+1]=e;let i=0,a=n+2;for(let t=0;t<2;t++){let t=0;for(let e=0;e<8;++e){t|=r[i]<<3*e,i++}for(let e=0;e<3;++e){let r=t>>8*e&255;s[a]=r,a++}}}function G(t){const e=t>>11&31,r=t>>5&63,s=31&t;return[e<<3|e>>2,r<<2|r>>4,s<<3|s>>2,255]}function K(t,e,r){const s=t.map((t,s)=>Math.floor(t*(1-r)+e[s]*r));return s[3]=255,s}function J(t,e,r,s){const n=function(t,e,r){const s=t[e]|t[e+1]<<8,n=t[e+2]|t[e+3]<<8,i=G(s),a=G(n);return[i,a,K(i,a,r&&s<=n?.5:1/3),r&&s<=n?[0,0,0,0]:K(i,a,2/3)]}(e,r,s),i=function(t,e){let r=e+4,s=new Uint8Array(16);for(let e=0;e<4;e++){let n=t[r+e];s[4*e+0]=3&n,s[4*e+1]=n>>2&3,s[4*e+2]=n>>4&3,s[4*e+3]=n>>6&3}return s}(e,r);for(let e=0;e<16;e++)for(let r=0;r<4;r++)t[4*e+r]=n[i[e]][r]}function H(t){for(let e=0;e<4;e++)for(let r=0;r<4;r++)t(r,e)}function Y(t){let e=7&t,r=280&t,s=96&t;return 2!=e&&4!=e&&(e=1),16!=r&&r!=p&&(r=8),64!=s&&(s=32),e|r|s|128&t}function Z(t,e){let{x:r=0,y:s=0,width:n=0,height:i=0}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=0;H(function(o,l){let u=r+o,c=s+l;if(u<n&&c<i){let r=4*(n*c+u);for(let s=0;s<4;s++)t[r+s]=e[a++]}else a+=4})}function Q(t,e,r,s,n){let i=6&(n=Y(n))?8:0;const a=new X(t,e,n);var o;(1===(o=a).count?new L(o):16&o.flags||0==o.count?new U(o):new P(o)).compress(r,s+i),2&n?function(t,e,r,s){for(let n=0;n<8;n++){let i=j(t[8*n+3]),a=j(t[8*n+7]);!(e&1<<2*n)&&(i=0),!(e&1<<2*n+1)&&(a=0),r[s+n]=i|a<<4}}(t,e,r,s):4&n&&D(t,e,r,s)}function $(t,e,r,s){J(t,e,r+(6&(s=Y(s))?8:0),!!(1&s)),2&s?function(t,e,r){for(let s=0;s<8;++s){let n=e[r+s],i=15&n,a=240&n;t[8*s+3]=i|i<<4,t[8*s+7]=a|a>>4}}(t,e,r):4&s&&function(t,e,r){let s=e[r+0],n=e[r+1],i=N(s,n,s<=n?5:7),a=new Uint8Array(16),o=0,l=2;for(let t=0;t<2;t++){let t=0;for(let s=0;s<3;s++)t|=e[r+l]<<8*s,l++;for(let e=0;e<8;e++){let r=t>>3*e&7;a[o]=r,o++}}for(let e=0;e<16;++e)t[4*e+3]=i[a[e]]}(t,e,r)}function tt(t,e,r,s,n){const i=1&(n=Y(n))?8:16;let a=0;!function(t,e,r){for(let s=0;s<e;s+=4)for(let e=0;e<t;e+=4)r(e,s)}(e,r,function(o,l){const{block:u,mask:c}=function(t){let{x:e=0,y:r=0,width:s=0,height:n=0}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const i=new Uint8Array(64);let a=0,o=0;return H(function(l,u){let c=e+l,h=r+u;if(c<s&&h<n){let e=4*(s*h+c);for(let r=0;r<4;r++)i[o++]=t[e++];a|=1<<4*u+l}else o+=4}),{block:i,mask:a}}(t,{x:o,y:l,width:e,height:r});Q(u,c,s,a,n),a+=i})}const et=1,rt=2,st=4;function nt(t,e,r,s){let n=t instanceof ArrayBuffer?new Uint8Array(t):t;const i=function(t,e,r){return r=Y(r),Math.floor((t+3)/4)*Math.floor((e+3)/4)*(1&r?8:16)}(e,r,s),a=new Uint8Array(i);return tt(n,e,r,a,s),a}function it(t,e,r,s){let n=t instanceof ArrayBuffer?new Uint8Array(t):t;const i=new Uint8Array(e*r*4);return function(t,e,r,s,n){const i=1&(n=Y(n))?8:16;let a=0;for(let o=0;o<r;o+=4)for(let l=0;l<e;l+=4){const u=new Uint8Array(64);$(u,s,a,n),Z(t,u,{x:l,y:o,width:e,height:r}),a+=i}}(i,e,r,n,s),i}function at(t,e,r){return t>>r&2**e-1}function ot(t,e,r,s){const n=Math.round(t/255*31),i=Math.round(e/255*31),a=Math.round(r/255*31);return Math.round(s/255)<<15|n<<10|i<<5|a}function lt(t){const e=at(t,5,10),r=at(t,5,5),s=at(t,5,0),n=t>>15&1,[i,a,o]=[e,r,s].map(t=>t<<3|t>>2);return[i,a,o,255*n]}class ut extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.Texture2DReader"===t}read(t){const e=new u,s=new r;let n=e.read(t),i=s.read(t),a=s.read(t),o=s.read(t),l=null,c=null;o>1&&console.warn("Found mipcount of ".concat(o,", only the first will be used."));let h=s.read(t);i*a*4>h&&(l=i>>16&65535,i&=65535,c=a>>16&65535,a&=65535,i*a*4!==h&&console.warn("invalid width & height! ".concat(i," x ").concat(a)));let d=t.read(h);if(4==n)d=it(d,i,a,et);else if(5==n)d=it(d,i,a,rt);else if(6==n)d=it(d,i,a,st);else if(2==n)d=function(t){const e=new Uint8Array(t),r=e.length/2,s=new Uint8Array(4*r);for(let t=0;t<r;t++){const r=lt(e[2*t]|e[2*t+1]<<8);[s[4*t],s[4*t+1],s[4*t+2],s[4*t+3]]=r}return s}(d);else if(0!=n)throw new Error("Non-implemented Texture2D format type (".concat(n,") found."));d instanceof ArrayBuffer&&(d=new Uint8Array(d));for(let t=0;t<d.length;t+=4){let e=255/d[t+3];d[t]=Math.min(Math.ceil(d[t]*e),255),d[t+1]=Math.min(Math.ceil(d[t+1]*e),255),d[t+2]=Math.min(Math.ceil(d[t+2]*e),255)}const w={format:n,export:{type:this.type,data:d,width:i,height:a}};return null!==l&&(w.additional={usedWidth:l,usedHeight:c}),w}write(t,e,s){const n=new u,i=new r;this.writeIndex(t,s);let a=e.export.width,o=e.export.height;null!=e.additional&&(a|=e.additional.usedWidth<<16,o|=e.additional.usedHeight<<16),n.write(t,e.format,null),i.write(t,a,null),i.write(t,o,null),i.write(t,1,null);let l=e.export.data;for(let t=0;t<l.length;t+=4){const e=l[t+3]/255;l[t]=Math.floor(l[t]*e),l[t+1]=Math.floor(l[t+1]*e),l[t+2]=Math.floor(l[t+2]*e)}4===e.format?l=nt(l,a,o,et):5===e.format?l=nt(l,a,o,rt):6===e.format?l=nt(l,a,o,st):2===e.format&&(l=function(t){const e=new Uint8Array(t),r=e.length/4,s=new Uint8Array(2*r);for(let t=0;t<r;t++){const r=ot(e[4*t],e[4*t+1],e[4*t+2],e[4*t+3]);s[2*t]=255&r,s[2*t+1]=r>>8}return s}(l)),i.write(t,l.length,null),t.concat(l)}isValueType(){return!1}}class ct extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.Vector3Reader":case"Microsoft.Xna.Framework.Vector3":return!0;default:return!1}}read(t){const e=new w;return{x:e.read(t),y:e.read(t),z:e.read(t)}}write(t,e,r){this.writeIndex(t,r);const s=new w;s.write(t,e.x,null),s.write(t,e.y,null),s.write(t,e.z,null)}}t.ArrayReader=class extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.ArrayReader"===t}static hasSubType(){return!0}constructor(t){super(),this.reader=t}read(t,e){let s=(new r).read(t),n=[];for(let r=0;r<s;r++){let r=this.reader.isValueType()?this.reader.read(t):e.read(t);n.push(r)}return n}write(t,e,s){this.writeIndex(t,s);(new r).write(t,e.length,null);for(let r=0;r<e.length;r++)this.reader.write(t,e[r],this.reader.isValueType()?null:s)}isValueType(){return!1}get type(){return"Array<".concat(this.reader.type,">")}parseTypeList(){const t=this.reader.parseTypeList();return["".concat(this.type,":").concat(t.length),...t]}},t.BaseReader=e,t.BmFontReader=class extends e{static isTypeOf(t){return"BmFont.XmlSourceReader"===t}read(t){const e=(new a).read(t);return{export:{type:this.type,data:e}}}write(t,e,r){this.writeIndex(t,r);(new a).write(t,e.export.data,null)}isValueType(){return!1}},t.BooleanReader=o,t.CharReader=l,t.DictionaryReader=class extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.DictionaryReader"===t}static hasSubType(){return!0}constructor(t,e){if(null==t||null==e)throw new Error("Cannot create instance of DictionaryReader without Key and Value.");super(),this.key=t,this.value=e}read(t,e){let s={};const n=(new r).read(t);for(let r=0;r<n;r++){let r=this.key.isValueType()?this.key.read(t):e.read(t),n=this.value.isValueType()?this.value.read(t):e.read(t);s[r]=n}return s}write(t,e,r){this.writeIndex(t,r),t.writeUInt32(Object.keys(e).length);for(let s of Object.keys(e))this.key.write(t,s,this.key.isValueType()?null:r),this.value.write(t,e[s],this.value.isValueType()?null:r)}isValueType(){return!1}get type(){return"Dictionary<".concat(this.key.type,",").concat(this.value.type,">")}parseTypeList(){return[this.type,...this.key.parseTypeList(),...this.value.parseTypeList()]}},t.DoubleReader=class extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.DoubleReader":case"System.Double":return!0;default:return!1}}read(t){return t.readDouble()}write(t,e,r){this.writeIndex(t,r),t.writeDouble(e)}},t.EffectReader=class extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.EffectReader":case"Microsoft.Xna.Framework.Graphics.Effect":return!0;default:return!1}}read(t){const e=(new r).read(t),s=t.read(e);return{export:{type:this.type,data:s}}}write(t,e,s){this.writeIndex(t,s);const n=e.export.data;(new r).write(t,n.byteLength,null),t.concat(n)}isValueType(){return!1}},t.Int32Reader=u,t.LightweightTexture2DReader=class extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.Texture2DReader"===t}static type(){return"Texture2D"}read(t){const e=new u,s=new r;let n=e.read(t),i=s.read(t),a=s.read(t),o=s.read(t);o>1&&console.warn("Found mipcount of ".concat(o,", only the first will be used."));let l=s.read(t),c=t.read(l);if(c=new Uint8Array(c),0!=n)throw new Error("Compressed texture format is not supported!");for(let t=0;t<c.length;t+=4){let e=255/c[t+3];c[t]=Math.min(Math.ceil(c[t]*e),255),c[t+1]=Math.min(Math.ceil(c[t+1]*e),255),c[t+2]=Math.min(Math.ceil(c[t+2]*e),255)}return{format:n,export:{type:this.type,data:c,width:i,height:a}}}write(t,e,s){if(0!=e.format)throw new Error("Compressed texture format is not supported!");const n=new u,i=new r;this.writeIndex(t,s),e.export.width,e.export.height,n.write(t,e.format,null),i.write(t,e.export.width,null),i.write(t,e.export.height,null),i.write(t,1,null);let a=e.export.data;for(let t=0;t<a.length;t+=4){const e=a[t+3]/255;a[t]=Math.floor(a[t]*e),a[t+1]=Math.floor(a[t+1]*e),a[t+2]=Math.floor(a[t+2]*e)}i.write(t,a.length,null),t.concat(a)}isValueType(){return!1}get type(){return"Texture2D"}},t.ListReader=c,t.NullableReader=h,t.PointReader=class extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.PointReader":case"Microsoft.Xna.Framework.Point":return!0;default:return!1}}read(t){const e=new u;return{x:e.read(t),y:e.read(t)}}write(t,e,r){this.writeIndex(t,r);const s=new u;s.write(t,e.x,null),s.write(t,e.y,null)}},t.RectangleReader=d,t.ReflectiveReader=class extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.ReflectiveReader"===t}static hasSubType(){return!0}constructor(t){super(),this.reader=t}read(t,e){return this.reader.read(t,e)}write(t,e,r){this.reader.write(t,e,this.reader.isValueType()?null:r)}isValueType(){return!1}get type(){return"".concat(this.reader.type)}parseTypeList(){return[...this.reader.parseTypeList()]}},t.SingleReader=w,t.SpriteFontReader=class extends e{static isTypeOf(t){return"Microsoft.Xna.Framework.Content.SpriteFontReader"===t}static parseTypeList(){return["SpriteFont","Texture2D","List<Rectangle>","Rectangle","List<Rectangle>","Rectangle","List<Char>","Char",null,null,"List<Vector3>","Vector3","Nullable<Char>","Char"]}read(t,e){const r=new u,s=new w,n=new h(new l);return{texture:e.read(t),glyphs:e.read(t),cropping:e.read(t),characterMap:e.read(t),verticalLineSpacing:r.read(t),horizontalSpacing:s.read(t),kerning:e.read(t),defaultCharacter:n.read(t)}}write(t,e,r){const s=new u,n=new l,i=new w,a=new h(n),o=new ut,p=new c(new d),f=new c(n),y=new c(new ct);this.writeIndex(t,r);try{o.write(t,e.texture,r),t.alloc(1e5),p.write(t,e.glyphs,r),p.write(t,e.cropping,r),f.write(t,e.characterMap,r),s.write(t,e.verticalLineSpacing,null),i.write(t,e.horizontalSpacing,null),y.write(t,e.kerning,r),a.write(t,e.defaultCharacter,null)}catch(t){throw t}}isValueType(){return!1}},t.StringReader=a,t.TBinReader=class extends e{static isTypeOf(t){return"xTile.Pipeline.TideReader"===t}read(t){let e=(new u).read(t),r=t.read(e);return{export:{type:this.type,data:r}}}write(t,e,r){this.writeIndex(t,r);const s=e.export.data;(new u).write(t,s.byteLength,null),t.concat(s)}isValueType(){return!1}},t.Texture2DReader=ut,t.UInt32Reader=r,t.Vector2Reader=class extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.Vector2Reader":case"Microsoft.Xna.Framework.Vector2":return!0;default:return!1}}read(t){const e=new w;return{x:e.read(t),y:e.read(t)}}write(t,e,r){this.writeIndex(t,r);const s=new w;s.write(t,e.x,null),s.write(t,e.y,null)}},t.Vector3Reader=ct,t.Vector4Reader=class extends e{static isTypeOf(t){switch(t){case"Microsoft.Xna.Framework.Content.Vector4Reader":case"Microsoft.Xna.Framework.Vector4":return!0;default:return!1}}read(t){const e=new w;return{x:e.read(t),y:e.read(t),z:e.read(t),w:e.read(t)}}write(t,e,r){this.writeIndex(t,r);const s=new w;s.write(t,e.x,null),s.write(t,e.y,null),s.write(t,e.z,null),s.write(t,e.w,null)}},Object.defineProperty(t,"__esModule",{value:!0})});
